"use client";

import React, { useState } from 'react';
import { Card, Form, Input, Button, Upload, message, Steps, Descriptions, Alert, Space, Tag } from 'antd';
import SystemVerification from './SystemVerification';
import { 
  IdcardOutlined, 
  CarOutlined, 
  CheckCircleOutlined, 
  CloseCircleOutlined,
  UploadOutlined,
  SearchOutlined
} from '@ant-design/icons';

const { Step } = Steps;
const { TextArea } = Input;

interface CustomerInfo {
  id: string;
  fullName: string;
  phone: string;
  email: string;
  licenseNumber: string;
  idCardNumber: string;
  address: string;
  dateOfBirth: string;
  licenseExpiry: string;
}

interface DocumentVerificationProps {
  mode?: 'check-documents' | 'verify-system';
}

export default function DocumentVerification({ mode = 'check-documents' }: DocumentVerificationProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [customerInfo, setCustomerInfo] = useState<CustomerInfo | null>(null);
  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'verified' | 'rejected'>('pending');
  const [form] = Form.useForm();

  // Mock data - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
  const mockCustomerData: CustomerInfo = {
    id: 'KH-001',
    fullName: 'Nguy·ªÖn VƒÉn A',
    phone: '0901234567',
    email: 'nguyenvana@email.com',
    licenseNumber: 'B1-123456789',
    idCardNumber: '123456789012',
    address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    dateOfBirth: '1990-01-15',
    licenseExpiry: '2025-12-31'
  };

  const handleSearchCustomer = (values: { phone: string; idCard: string }) => {
    // Mock search - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
    if (values.phone === '0901234567' || values.idCard === '123456789012') {
      setCustomerInfo(mockCustomerData);
      setCurrentStep(1);
      message.success('T√¨m th·∫•y th√¥ng tin kh√°ch h√†ng');
    } else {
      message.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng');
    }
  };

  const handleDocumentUpload = (info: any) => {
    if (info.file.status === 'done') {
      message.success('T·∫£i l√™n th√†nh c√¥ng');
    } else if (info.file.status === 'error') {
      message.error('T·∫£i l√™n th·∫•t b·∫°i');
    }
  };

  const handleVerifyDocuments = () => {
    // Mock verification process
    setVerificationStatus('verified');
    setCurrentStep(2);
    message.success('X√°c th·ª±c gi·∫•y t·ªù th√†nh c√¥ng');
  };

  const handleRejectDocuments = () => {
    setVerificationStatus('rejected');
    setCurrentStep(2);
    message.error('Gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá');
  };

  const renderSearchStep = () => (
    <Card title="üîç T√¨m ki·∫øm kh√°ch h√†ng" className="mb-4">
      <Form form={form} onFinish={handleSearchCustomer} layout="vertical">
        <Form.Item
          name="phone"
          label="S·ªë ƒëi·ªán tho·∫°i"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' }]}
        >
          <Input prefix="üì±" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
        </Form.Item>
        
        <Form.Item
          name="idCard"
          label="S·ªë CCCD/CMND"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD/CMND' }]}
        >
          <Input prefix="üÜî" placeholder="Nh·∫≠p s·ªë CCCD/CMND" />
        </Form.Item>

        <Form.Item>
          <Button type="primary" htmlType="submit" icon={<SearchOutlined />} block>
            T√¨m ki·∫øm kh√°ch h√†ng
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );

  const renderCustomerInfo = () => (
    <Card title="üë§ Th√¥ng tin kh√°ch h√†ng" className="mb-4">
      <Descriptions column={2} bordered>
        <Descriptions.Item label="M√£ kh√°ch h√†ng">{customerInfo?.id}</Descriptions.Item>
        <Descriptions.Item label="H·ªç t√™n">{customerInfo?.fullName}</Descriptions.Item>
        <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">{customerInfo?.phone}</Descriptions.Item>
        <Descriptions.Item label="Email">{customerInfo?.email}</Descriptions.Item>
        <Descriptions.Item label="S·ªë CCCD">{customerInfo?.idCardNumber}</Descriptions.Item>
        <Descriptions.Item label="Ng√†y sinh">{customerInfo?.dateOfBirth}</Descriptions.Item>
        <Descriptions.Item label="S·ªë GPLX">{customerInfo?.licenseNumber}</Descriptions.Item>
        <Descriptions.Item label="H·∫°n GPLX">{customerInfo?.licenseExpiry}</Descriptions.Item>
        <Descriptions.Item label="ƒê·ªãa ch·ªâ" span={2}>{customerInfo?.address}</Descriptions.Item>
      </Descriptions>
    </Card>
  );

  const renderDocumentCheck = () => (
    <Card title="üìÑ Ki·ªÉm tra gi·∫•y t·ªù" className="mb-4">
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        
        {/* CCCD/CMND */}
        <Card size="small" title={<><IdcardOutlined /> CCCD/CMND</>}>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Alert 
              message="Y√™u c·∫ßu: CCCD/CMND c√≤n h·∫°n s·ª≠ d·ª•ng, ·∫£nh r√µ n√©t, ƒë·∫ßy ƒë·ªß th√¥ng tin"
              type="info" 
              showIcon 
            />
            <Upload
              name="idCard"
              listType="picture-card"
              onChange={handleDocumentUpload}
              beforeUpload={() => false}
            >
              <div>
                <UploadOutlined />
                <div>T·∫£i l√™n CCCD/CMND</div>
              </div>
            </Upload>
            <div>
              <Tag color="green">‚úÖ S·ªë CCCD: {customerInfo?.idCardNumber}</Tag>
              <Tag color="blue">üìÖ C√≤n h·∫°n s·ª≠ d·ª•ng</Tag>
            </div>
          </Space>
        </Card>

        {/* Gi·∫•y ph√©p l√°i xe */}
        <Card size="small" title={<><CarOutlined /> Gi·∫•y ph√©p l√°i xe</>}>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Alert 
              message="Y√™u c·∫ßu: GPLX c√≤n h·∫°n s·ª≠ d·ª•ng, ƒë√∫ng h·∫°ng l√°i xe, ·∫£nh r√µ n√©t"
              type="info" 
              showIcon 
            />
            <Upload
              name="license"
              listType="picture-card"
              onChange={handleDocumentUpload}
              beforeUpload={() => false}
            >
              <div>
                <UploadOutlined />
                <div>T·∫£i l√™n GPLX</div>
              </div>
            </Upload>
            <div>
              <Tag color="green">‚úÖ S·ªë GPLX: {customerInfo?.licenseNumber}</Tag>
              <Tag color="orange">üìÖ H·∫°n ƒë·∫øn: {customerInfo?.licenseExpiry}</Tag>
              <Tag color="blue">üöó H·∫°ng B1</Tag>
            </div>
          </Space>
        </Card>

        {/* Ghi ch√∫ */}
        <Form.Item label="Ghi ch√∫ (n·∫øu c√≥)">
          <TextArea rows={3} placeholder="Ghi ch√∫ v·ªÅ gi·∫•y t·ªù, l∆∞u √Ω ƒë·∫∑c bi·ªát..." />
        </Form.Item>

        {/* N√∫t x√°c th·ª±c */}
        <Space size="middle">
          <Button 
            type="primary" 
            size="large"
            icon={<CheckCircleOutlined />}
            onClick={handleVerifyDocuments}
          >
            X√°c th·ª±c th√†nh c√¥ng
          </Button>
          <Button 
            danger 
            size="large"
            icon={<CloseCircleOutlined />}
            onClick={handleRejectDocuments}
          >
            T·ª´ ch·ªëi gi·∫•y t·ªù
          </Button>
        </Space>
      </Space>
    </Card>
  );

  const renderVerificationResult = () => (
    <Card title="üìã K·∫øt qu·∫£ x√°c th·ª±c" className="mb-4">
      {verificationStatus === 'verified' ? (
        <Alert
          message="X√°c th·ª±c th√†nh c√¥ng"
          description="Gi·∫•y t·ªù h·ª£p l·ªá, kh√°ch h√†ng c√≥ th·ªÉ ti·∫øn h√†nh thu√™ xe."
          type="success"
          showIcon
          icon={<CheckCircleOutlined />}
        />
      ) : (
        <Alert
          message="X√°c th·ª±c th·∫•t b·∫°i"
          description="Gi·∫•y t·ªù kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i."
          type="error"
          showIcon
          icon={<CloseCircleOutlined />}
        />
      )}
      
      <div className="mt-4">
        <Button type="primary" onClick={() => {
          setCurrentStep(0);
          setCustomerInfo(null);
          setVerificationStatus('pending');
          form.resetFields();
        }}>
          X√°c th·ª±c kh√°ch h√†ng kh√°c
        </Button>
      </div>
    </Card>
  );

  if (mode === 'verify-system') {
    return <SystemVerification customerInfo={customerInfo || undefined} />;
  }

  return (
    <div>
      <Steps current={currentStep} className="mb-6">
        <Step title="T√¨m ki·∫øm" description="T√¨m th√¥ng tin kh√°ch h√†ng" />
        <Step title="Ki·ªÉm tra" description="X√°c th·ª±c gi·∫•y t·ªù" />
        <Step title="K·∫øt qu·∫£" description="Ho√†n th√†nh x√°c th·ª±c" />
      </Steps>

      {currentStep === 0 && renderSearchStep()}
      {currentStep === 1 && (
        <>
          {renderCustomerInfo()}
          {renderDocumentCheck()}
        </>
      )}
      {currentStep === 2 && renderVerificationResult()}
    </div>
  );
}
